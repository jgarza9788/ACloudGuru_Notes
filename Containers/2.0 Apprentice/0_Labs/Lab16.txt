Credentials
------------
# Master 
username: cloud_user
password: 9gA*Lt#c
privateIP: 10.0.1.101
publicIP: 18.208.183.232

ssh cloud_user@18.208.183.232

# Worker
username: cloud_user
password: 9gA*Lt#c
privateIP: 10.0.1.102
publicIP: 18.208.138.207

ssh cloud_user@18.208.138.207


Using Probes in Docker Kubernetes Service
=========================================

Introduction
------------

Probes are a great tool for making some applications more resilient in Kubernetes. In this lab, you will have the opportunity to explore how to use probes to make Kubernetes react more quickly to application failures. This will help you design more robust applications in your Kubernetes clusters!

Solution
--------

1.  In a web browser, navigate to the Docker Universal Control Plane (UCP):
    
        https://<UCP_MANAGER_PUBLIC_IP>
        https://18.208.183.232
        
    
2.  Click **Advanced** and proceed to the destination.
3.  Login to Docker Enterprise using the following information:

*   _Username:_ "admin"
*   _Password:_ "<UCP\_MANAGER\_PASSWORD>"

### Get the Pod Definition

1.  Click **Kubernetes**.
2.  Click **Pods**.
3.  Click the pod named, **webserver**.
4.  Click the gear icon to edit the pod.
5.  In the _spec_ section of the _Object YAML_, make the following changes:

```
apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"name":"webserver","namespace":"default"},"spec":{"containers":[{"image":"linuxacademycontent/random-crashing-web-server:1","name":"webserver"}]}}
    kubernetes.io/psp: privileged
  creationTimestamp: null
  name: webserver
  selfLink: /api/v1/namespaces/default/pods/webserver
spec:
  containers:
  - image: linuxacademycontent/random-crashing-web-server:1
    imagePullPolicy: IfNotPresent
    name: webserver
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-9cmsg
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: ucp-manager
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  - key: com.docker.ucp.manager
    operator: Exists
  volumes:
  - name: default-token-9cmsg
    secret:
      defaultMode: 420
      secretName: default-token-9cmsg
status:
  phase: Pending
  qosClass: BestEffort


```

        terminationMessagePolicy: File
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        volumeMounts: 

```
apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"name":"webserver","namespace":"default"},"spec":{"containers":[{"image":"linuxacademycontent/random-crashing-web-server:1","name":"webserver"}]}}
    kubernetes.io/psp: privileged
  creationTimestamp: null
  name: webserver
  selfLink: /api/v1/namespaces/default/pods/webserver
spec:
  containers:
  - image: linuxacademycontent/random-crashing-web-server:1
    imagePullPolicy: IfNotPresent
    name: webserver
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    livenessProbe:
      httpGet:
        path: /
        port: 8080
      initialDelaySeconds: 3
      periodSeconds: 3
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-9cmsg
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: ucp-manager
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  - key: com.docker.ucp.manager
    operator: Exists
  volumes:
  - name: default-token-9cmsg
    secret:
      defaultMode: 420
      secretName: default-token-9cmsg
status:
  phase: Pending
  qosClass: BestEffort


```

    
6.  Copy the updated _Object YAML_ text and click the **Cancel**.

### Add a Probe to the Pod

1.  On the right-side of the page, click the three dots, and then click **Remove**.
2.  Click **Confirm**.
3.  Once the pod has been terminated successfully, click **Create**.
4.  For the _Namespace_, select **default**.
5.  In the _Object YAML_ field, paste the updated YAML from the previous pod.
6.  Once the pod is running successfully, verify that the probe was added by checking the _Containers Restart Count_ value.

Conclusion
----------

Congratulations â€” you've completed this hands-on lab!
